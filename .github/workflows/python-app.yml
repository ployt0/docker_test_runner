# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    paths-ignore:
      - '**.md'
      - '**.png'
      - '**.jpg'
      - '**.webp'
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest coverage
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install ansible

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest for coverage
      run: |
        cd tests
        PYTHONPATH=../python_files coverage run --source="../python_files" -m pytest

    - name: Test coverage
      run: |
        cd tests
        PYTHONPATH=../python_files coverage report -m --fail-under=90

    - name: Checksum build directory
      id: build-checksum
      run: |
        echo "::set-output name=checksum::$(find build_directory -type f -exec md5sum {} \; | sort | md5sum)"

    - name: Cache image
      id: cache-image
      uses: actions/cache@v3
      with:
        path: |
          build_directory/host2test_latest.tar.gz
          build_directory/rsa_key
        key: testimg-${{ steps.build-checksum.outputs.checksum }}

    - name: Build nginx container and key
      if: steps.cache-image.outputs.cache-hit != 'true'
      run: |
        cd build_directory
        ssh-keygen -f rsa_key -t rsa -b 2048 -N ""
        docker build -t host2test .
        docker save host2test:latest | gzip > host2test_latest.tar.gz

    - name: Load unpacked cache
      if: steps.cache-image.outputs.cache-hit == 'true'
      run: |
        docker load -i build_directory/host2test_latest.tar.gz

    - name: Run nginx container
      run: |
        docker run -tid --name mytest host2test

    - name: Provision nginx container
      run: |
        cont_ip=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mytest)
        cd pb_provisioner
        echo "$cont_ip ansible_ssh_private_key_file=../build_directory/rsa_key ansible_user=testrunner" > workflow_inventory
        cat workflow_inventory
        # ANSIBLE_HOST_KEY_CHECKING to prevent automation hanging/breaking on:
        # "The authenticity of host '172.17.0.2 (172.17.0.2)' can't be established."
        ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook provision_server.yml -i workflow_inventory -v

    - name: Check provisioning configured nginx TLS
      run: |
        cont_ip=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mytest)
        curl https://$cont_ip/index.html -k

    - name: Check provisioning customized content
      run: |
        cont_ip=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mytest)
        curl https://$cont_ip/provisioned.html -k


